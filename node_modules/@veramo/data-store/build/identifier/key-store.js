"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.KeyStore = void 0;
const key_manager_1 = require("@veramo/key-manager");
const key_1 = require("../entities/key");
const debug_1 = __importDefault(require("debug"));
const utils_1 = require("../utils");
const debug = (0, debug_1.default)('veramo:typeorm:key-store');
/**
 * An implementation of {@link @veramo/key-manager#AbstractKeyStore | AbstractKeyStore} that uses a TypeORM database to
 * store the relationships between keys, their IDs, aliases and
 * {@link @veramo/key-manager#AbstractKeyManagementSystem | KMS implementations}, as they are known and managed by a
 * Veramo agent.
 *
 * An instance of this class can be used by {@link @veramo/key-manager#KeyManager} as the data storage layer.
 *
 * To make full use of this class, it should use the same database as the one used by
 * {@link @veramo/data-store#DIDStore | DIDStore}.
 *
 * @public
 */
class KeyStore extends key_manager_1.AbstractKeyStore {
    constructor(dbConnection) {
        super();
        this.dbConnection = dbConnection;
    }
    get({ kid }) {
        return __awaiter(this, void 0, void 0, function* () {
            const key = yield (yield (0, utils_1.getConnectedDb)(this.dbConnection)).getRepository(key_1.Key).findOneBy({ kid });
            if (!key)
                throw Error('Key not found');
            return key;
        });
    }
    delete({ kid }) {
        return __awaiter(this, void 0, void 0, function* () {
            const key = yield (yield (0, utils_1.getConnectedDb)(this.dbConnection)).getRepository(key_1.Key).findOneBy({ kid });
            if (!key)
                throw Error('Key not found');
            debug('Deleting key', kid);
            yield (yield (0, utils_1.getConnectedDb)(this.dbConnection)).getRepository(key_1.Key).remove(key);
            return true;
        });
    }
    import(args) {
        return __awaiter(this, void 0, void 0, function* () {
            const key = new key_1.Key();
            key.kid = args.kid;
            key.publicKeyHex = args.publicKeyHex;
            key.type = args.type;
            key.kms = args.kms;
            key.meta = args.meta;
            debug('Saving key', args.kid);
            yield (yield (0, utils_1.getConnectedDb)(this.dbConnection)).getRepository(key_1.Key).save(key);
            return true;
        });
    }
    list(args = {}) {
        return __awaiter(this, void 0, void 0, function* () {
            const keys = yield (yield (0, utils_1.getConnectedDb)(this.dbConnection)).getRepository(key_1.Key).find();
            const managedKeys = keys.map((key) => {
                const { kid, publicKeyHex, type, meta, kms } = key;
                return { kid, publicKeyHex, type, meta, kms };
            });
            return managedKeys;
        });
    }
}
exports.KeyStore = KeyStore;
//# sourceMappingURL=key-store.js.map