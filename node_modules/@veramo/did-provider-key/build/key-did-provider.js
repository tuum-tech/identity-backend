"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.KeyDIDProvider = void 0;
const did_manager_1 = require("@veramo/did-manager");
const multibase_1 = __importDefault(require("multibase"));
const multicodec_1 = __importDefault(require("multicodec"));
const debug_1 = __importDefault(require("debug"));
const debug = (0, debug_1.default)('veramo:did-key:identifier-provider');
/**
 * {@link @veramo/did-manager#DIDManager} identifier provider for `did:key` identifiers
 *
 * @beta This API may change without a BREAKING CHANGE notice.
 */
class KeyDIDProvider extends did_manager_1.AbstractIdentifierProvider {
    constructor(options) {
        super();
        this.defaultKms = options.defaultKms;
    }
    createIdentifier({ kms, options }, context) {
        return __awaiter(this, void 0, void 0, function* () {
            const key = yield context.agent.keyManagerCreate({ kms: kms || this.defaultKms, type: 'Ed25519' });
            const methodSpecificId = Buffer.from(multibase_1.default.encode('base58btc', multicodec_1.default.addPrefix('ed25519-pub', Buffer.from(key.publicKeyHex, 'hex')))).toString();
            const identifier = {
                did: 'did:key:' + methodSpecificId,
                controllerKeyId: key.kid,
                keys: [key],
                services: [],
            };
            debug('Created', identifier.did);
            return identifier;
        });
    }
    updateIdentifier(args, context) {
        return __awaiter(this, void 0, void 0, function* () {
            throw new Error('KeyDIDProvider updateIdentifier not supported yet.');
        });
    }
    deleteIdentifier(identifier, context) {
        return __awaiter(this, void 0, void 0, function* () {
            for (const { kid } of identifier.keys) {
                yield context.agent.keyManagerDelete({ kid });
            }
            return true;
        });
    }
    addKey({ identifier, key, options }, context) {
        return __awaiter(this, void 0, void 0, function* () {
            throw Error('KeyDIDProvider addKey not supported');
        });
    }
    addService({ identifier, service, options }, context) {
        return __awaiter(this, void 0, void 0, function* () {
            throw Error('KeyDIDProvider addService not supported');
        });
    }
    removeKey(args, context) {
        return __awaiter(this, void 0, void 0, function* () {
            throw Error('KeyDIDProvider removeKey not supported');
        });
    }
    removeService(args, context) {
        return __awaiter(this, void 0, void 0, function* () {
            throw Error('KeyDIDProvider removeService not supported');
        });
    }
}
exports.KeyDIDProvider = KeyDIDProvider;
//# sourceMappingURL=key-did-provider.js.map