"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.JwtMessageHandler = void 0;
const message_handler_1 = require("@veramo/message-handler");
const did_jwt_1 = require("did-jwt");
const debug_1 = __importDefault(require("debug"));
const debug = (0, debug_1.default)('veramo:did-jwt:message-handler');
/**
 * A plugin for {@link @veramo/message-handler#MessageHandler} that finds and verifies a JWT in a message.
 * @public
 */
class JwtMessageHandler extends message_handler_1.AbstractMessageHandler {
    handle(message, context) {
        const _super = Object.create(null, {
            handle: { get: () => super.handle }
        });
        return __awaiter(this, void 0, void 0, function* () {
            if (message.raw) {
                try {
                    const decoded = (0, did_jwt_1.decodeJWT)(message.raw);
                    const audience = Array.isArray(decoded.payload.aud) ? decoded.payload.aud[0] : decoded.payload.aud;
                    const resolver = { resolve: (didUrl) => context.agent.resolveDid({ didUrl }) };
                    const result = yield (0, did_jwt_1.verifyJWT)(message.raw, { resolver, audience });
                    if (result.verified) {
                        debug('Message.raw is a valid JWT');
                        message.addMetaData({ type: decoded.header.typ || 'JWT', value: decoded.header.alg });
                        message.data = result.payload;
                    }
                    else {
                        debug(result);
                    }
                }
                catch (e) {
                    debug(e.message);
                }
            }
            return _super.handle.call(this, message, context);
        });
    }
}
exports.JwtMessageHandler = JwtMessageHandler;
//# sourceMappingURL=message-handler.js.map