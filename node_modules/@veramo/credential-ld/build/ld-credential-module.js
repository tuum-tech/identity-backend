"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.LdCredentialModule = void 0;
const cross_fetch_1 = __importDefault(require("cross-fetch"));
const debug_1 = __importDefault(require("debug"));
const jsonld_signatures_1 = require("@digitalcredentials/jsonld-signatures");
const vc = __importStar(require("@digitalcredentials/vc"));
const debug = (0, debug_1.default)('veramo:w3c:ld-credential-module');
class LdCredentialModule {
    constructor(options) {
        this.ldContextLoader = options.ldContextLoader;
        this.ldSuiteLoader = options.ldSuiteLoader;
    }
    getDocumentLoader(context, attemptToFetchContexts = false) {
        return (0, jsonld_signatures_1.extendContextLoader)((url) => __awaiter(this, void 0, void 0, function* () {
            // console.log(`resolving context for: ${url}`)
            // did resolution
            if (url.toLowerCase().startsWith('did:')) {
                const resolutionResult = yield context.agent.resolveDid({ didUrl: url });
                const didDoc = resolutionResult.didDocument;
                if (!didDoc)
                    return;
                // currently, Veramo LD suites can modify the resolution response for DIDs from
                // the document Loader. This allows us to fix incompatibilities between DID Documents
                // and LD suites to be fixed specifically within the Veramo LD Suites definition
                this.ldSuiteLoader.getAllSignatureSuites().forEach((x) => x.preDidResolutionModification(url, didDoc));
                // console.log(`Returning from Documentloader: ${JSON.stringify(returnDocument)}`)
                return {
                    contextUrl: null,
                    documentUrl: url,
                    document: didDoc,
                };
            }
            if (this.ldContextLoader.has(url)) {
                const contextDoc = yield this.ldContextLoader.get(url);
                return {
                    contextUrl: null,
                    documentUrl: url,
                    document: contextDoc,
                };
            }
            else {
                if (attemptToFetchContexts) {
                    // attempt to fetch the remote context!!!! MEGA FAIL for JSON-LD.
                    debug('WARNING: attempting to fetch the doc directly for ', url);
                    try {
                        const response = yield (0, cross_fetch_1.default)(url);
                        if (response.status === 200) {
                            const document = yield response.json();
                            return {
                                contextUrl: null,
                                documentUrl: url,
                                document,
                            };
                        }
                    }
                    catch (e) {
                        debug('WARNING: unable to fetch the doc or interpret it as JSON', e);
                    }
                }
            }
            debug(`WARNING: Possible unknown context/identifier for ${url} \n falling back to default documentLoader`);
            return vc.defaultDocumentLoader(url);
        }));
    }
    issueLDVerifiableCredential(credential, issuerDid, key, verificationMethodId, options, context) {
        var _a, _b, _c;
        return __awaiter(this, void 0, void 0, function* () {
            const suite = this.ldSuiteLoader.getSignatureSuiteForKeyType(key.type, (_c = (_b = (_a = key.meta) === null || _a === void 0 ? void 0 : _a.verificationMethod) === null || _b === void 0 ? void 0 : _b.type) !== null && _c !== void 0 ? _c : '');
            const documentLoader = this.getDocumentLoader(context, options.fetchRemoteContexts);
            // some suites can modify the incoming credential (e.g. add required contexts)
            suite.preSigningCredModification(credential);
            return yield vc.issue(Object.assign(Object.assign({}, options), { credential, suite: yield suite.getSuiteForSigning(key, issuerDid, verificationMethodId, context), documentLoader, compactProof: false }));
        });
    }
    signLDVerifiablePresentation(presentation, holderDid, key, verificationMethodId, challenge, domain, options, context) {
        var _a, _b, _c;
        return __awaiter(this, void 0, void 0, function* () {
            const suite = this.ldSuiteLoader.getSignatureSuiteForKeyType(key.type, (_c = (_b = (_a = key.meta) === null || _a === void 0 ? void 0 : _a.verificationMethod) === null || _b === void 0 ? void 0 : _b.type) !== null && _c !== void 0 ? _c : '');
            const documentLoader = this.getDocumentLoader(context, options.fetchRemoteContexts);
            suite.preSigningPresModification(presentation);
            return yield vc.signPresentation(Object.assign(Object.assign({}, options), { presentation, suite: yield suite.getSuiteForSigning(key, holderDid, verificationMethodId, context), challenge,
                domain,
                documentLoader, compactProof: false }));
        });
    }
    verifyCredential(credential, fetchRemoteContexts = false, options, context) {
        return __awaiter(this, void 0, void 0, function* () {
            const result = yield vc.verifyCredential(Object.assign(Object.assign({}, options), { credential, suite: this.ldSuiteLoader.getAllSignatureSuites().map((x) => x.getSuiteForVerification()), documentLoader: this.getDocumentLoader(context, fetchRemoteContexts), compactProof: false, checkStatus: () => __awaiter(this, void 0, void 0, function* () { return Promise.resolve({ verified: true }); }) }));
            if (!result.verified) {
                // result can include raw Error
                debug(`Error verifying LD Credential: ${JSON.stringify(result, null, 2)}`);
            }
            return result;
        });
    }
    verifyPresentation(presentation, challenge, domain, fetchRemoteContexts = false, options, context) {
        return __awaiter(this, void 0, void 0, function* () {
            const result = yield vc.verify(Object.assign(Object.assign({}, options), { presentation, suite: this.ldSuiteLoader.getAllSignatureSuites().map((x) => x.getSuiteForVerification()), documentLoader: this.getDocumentLoader(context, fetchRemoteContexts), challenge,
                domain, compactProof: false }));
            if (!result.verified) {
                // result can include raw Error
                debug(`Error verifying LD Presentation: ${JSON.stringify(result, null, 2)}`);
            }
            return result;
        });
    }
}
exports.LdCredentialModule = LdCredentialModule;
//# sourceMappingURL=ld-credential-module.js.map