"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.mapRecipientsToLocalKeys = exports.extractManagedRecipients = exports.extractSenderEncryptionKey = exports.createEcdhWrapper = void 0;
const did_resolver_1 = require("did-resolver");
const u8a = __importStar(require("uint8arrays"));
const debug_1 = __importDefault(require("debug"));
const utils_1 = require("@veramo/utils");
const debug = (0, debug_1.default)('veramo:did-comm:action-handler');
function createEcdhWrapper(secretKeyRef, context) {
    return (theirPublicKey) => __awaiter(this, void 0, void 0, function* () {
        if (theirPublicKey.length !== 32) {
            throw new Error('invalid_argument: incorrect publicKey key length for X25519');
        }
        const publicKey = { type: 'X25519', publicKeyHex: u8a.toString(theirPublicKey, 'base16') };
        const shared = yield context.agent.keyManagerSharedSecret({ secretKeyRef, publicKey });
        return u8a.fromString(shared, 'base16');
    });
}
exports.createEcdhWrapper = createEcdhWrapper;
function extractSenderEncryptionKey(jwe, context) {
    return __awaiter(this, void 0, void 0, function* () {
        let senderKey = null;
        const protectedHeader = (0, utils_1.decodeJoseBlob)(jwe.protected);
        if (typeof protectedHeader.skid === 'string') {
            const senderDoc = yield (0, utils_1.resolveDidOrThrow)(protectedHeader.skid, context);
            const sKey = (yield context.agent.getDIDComponentById({
                didDocument: senderDoc,
                didUrl: protectedHeader.skid,
                section: 'keyAgreement',
            }));
            if (!['Ed25519VerificationKey2018', 'X25519KeyAgreementKey2019'].includes(sKey.type)) {
                throw new Error(`not_supported: sender key of type ${sKey.type} is not supported`);
            }
            let publicKeyHex = (0, utils_1.extractPublicKeyHex)(sKey, true);
            senderKey = u8a.fromString(publicKeyHex, 'base16');
        }
        return senderKey;
    });
}
exports.extractSenderEncryptionKey = extractSenderEncryptionKey;
function extractManagedRecipients(jwe, context) {
    return __awaiter(this, void 0, void 0, function* () {
        const parsedDIDs = (jwe.recipients || [])
            .map((recipient) => {
            var _a, _b;
            const kid = (_a = recipient === null || recipient === void 0 ? void 0 : recipient.header) === null || _a === void 0 ? void 0 : _a.kid;
            const did = (_b = (0, did_resolver_1.parse)(kid || '')) === null || _b === void 0 ? void 0 : _b.did;
            if (kid && did) {
                return { recipient, kid, did };
            }
            else {
                return null;
            }
        })
            .filter(utils_1.isDefined);
        let managedRecipients = (yield Promise.all(parsedDIDs.map(({ recipient, kid, did }) => __awaiter(this, void 0, void 0, function* () {
            try {
                const identifier = yield context.agent.didManagerGet({ did });
                return { recipient, kid, identifier };
            }
            catch (e) {
                // identifier not found, skip it
                return null;
            }
        })))).filter(utils_1.isDefined);
        return managedRecipients;
    });
}
exports.extractManagedRecipients = extractManagedRecipients;
function mapRecipientsToLocalKeys(managedKeys, context) {
    return __awaiter(this, void 0, void 0, function* () {
        const potentialKeys = yield Promise.all(managedKeys.map(({ recipient, kid, identifier }) => __awaiter(this, void 0, void 0, function* () {
            // TODO: use caching, since all recipients are supposed to belong to the same identifier
            const identifierKeys = yield (0, utils_1.mapIdentifierKeysToDoc)(identifier, 'keyAgreement', context);
            const localKey = identifierKeys.find((key) => key.meta.verificationMethod.id === kid);
            if (localKey) {
                return { localKeyRef: localKey.kid, recipient };
            }
            else {
                return null;
            }
        })));
        const localKeys = potentialKeys.filter(utils_1.isDefined);
        return localKeys;
    });
}
exports.mapRecipientsToLocalKeys = mapRecipientsToLocalKeys;
//# sourceMappingURL=utils.js.map