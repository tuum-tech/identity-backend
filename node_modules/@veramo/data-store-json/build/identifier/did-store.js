"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.DIDStoreJson = void 0;
const did_manager_1 = require("@veramo/did-manager");
const debug_1 = __importDefault(require("debug"));
const structured_clone_1 = require("@ungap/structured-clone");
const debug = (0, debug_1.default)('veramo:data-store-json:did-store');
/**
 * An implementation of {@link @veramo/did-manager#AbstractDIDStore | AbstractDIDStore} that uses a JSON object to
 * store the relationships between DIDs, their providers and controllers and their keys and services as they are known
 * and managed by a Veramo agent.
 *
 * An instance of this class can be used by {@link @veramo/did-manager#DIDManager} as the data storage layer.
 *
 * This class must be initialized with a {@link VeramoJsonStore}, which serves as the JSON object storing data in
 * memory as well as providing an update notification callback to persist this data.
 * For correct usage, this MUST use the same {@link VeramoJsonStore} instance as the one used by
 * {@link @veramo/key-manager#KeyManager | KeyManager}.
 *
 * @beta This API may change without a BREAKING CHANGE notice.
 */
class DIDStoreJson extends did_manager_1.AbstractDIDStore {
    constructor(jsonStore) {
        super();
        this.notifyUpdate = jsonStore.notifyUpdate;
        this.cacheTree = jsonStore;
        if (!this.cacheTree.dids) {
            this.cacheTree.dids = {};
        }
        if (!this.cacheTree.keys) {
            this.cacheTree.keys = {};
        }
    }
    get({ did, alias, provider, }) {
        return __awaiter(this, void 0, void 0, function* () {
            let where = {};
            if (did !== undefined && alias === undefined) {
                where = { did };
            }
            else if (did === undefined && alias !== undefined && provider !== undefined) {
                where = { alias, provider };
            }
            else {
                throw Error('invalid_arguments: DidStoreJson.get requires did or (alias and provider)');
            }
            let identifier;
            if (where.did) {
                identifier = this.cacheTree.dids[where.did];
            }
            else {
                identifier = Object.values(this.cacheTree.dids).find((iid) => iid.provider === where.provider && iid.alias === where.alias);
            }
            if (!identifier)
                throw Error('Identifier not found');
            return (0, structured_clone_1.deserialize)((0, structured_clone_1.serialize)(identifier));
        });
    }
    delete({ did }) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.cacheTree.dids[did]) {
                const oldTree = (0, structured_clone_1.deserialize)((0, structured_clone_1.serialize)(this.cacheTree, { lossy: true }));
                delete this.cacheTree.dids[did];
                // FIXME: delete key associations?
                yield this.notifyUpdate(oldTree, this.cacheTree);
                return true;
            }
            return false;
        });
    }
    import(args) {
        return __awaiter(this, void 0, void 0, function* () {
            const oldTree = (0, structured_clone_1.deserialize)((0, structured_clone_1.serialize)(this.cacheTree, { lossy: true }));
            this.cacheTree.dids[args.did] = args;
            args.keys.forEach((key) => {
                this.cacheTree.keys[key.kid] = Object.assign(Object.assign({}, key), { 
                    // FIXME: keys should be able to associate with multiple DIDs
                    meta: Object.assign(Object.assign({}, key.meta), { did: args.did }) });
            });
            yield this.notifyUpdate(oldTree, this.cacheTree);
            return true;
        });
    }
    list(args) {
        return __awaiter(this, void 0, void 0, function* () {
            const result = Object.values(this.cacheTree.dids).filter((iid) => (!args.provider || (args.provider && iid.provider === args.provider)) &&
                (!args.alias || (args.alias && iid.alias === args.alias)));
            return (0, structured_clone_1.deserialize)((0, structured_clone_1.serialize)(result));
        });
    }
}
exports.DIDStoreJson = DIDStoreJson;
//# sourceMappingURL=did-store.js.map