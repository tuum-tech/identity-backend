"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.VeramoJsonWebSignature2020 = void 0;
const ld_suites_1 = require("../ld-suites");
const u8a = __importStar(require("uint8arrays"));
const json_web_signature_1 = require("@transmute/json-web-signature");
const utils_1 = require("@veramo/utils");
/**
 * Veramo wrapper for the JsonWebSignature2020 suite by Transmute Industries
 *
 * @alpha This API is experimental and is very likely to change or disappear in future releases without notice.
 */
class VeramoJsonWebSignature2020 extends ld_suites_1.VeramoLdSignature {
    getSupportedVerificationType() {
        return 'JsonWebKey2020';
    }
    getSupportedVeramoKeyType() {
        return 'Ed25519';
    }
    getSuiteForSigning(key, issuerDid, verificationMethodId, context) {
        return __awaiter(this, void 0, void 0, function* () {
            const controller = issuerDid;
            // DID Key ID
            let id = verificationMethodId;
            const signer = {
                // returns a JWS detached
                sign: (args) => __awaiter(this, void 0, void 0, function* () {
                    const header = {
                        alg: 'EdDSA',
                        b64: false,
                        crit: ['b64'],
                    };
                    const headerString = (0, utils_1.encodeJoseBlob)(header);
                    const messageBuffer = u8a.concat([u8a.fromString(`${headerString}.`, 'utf-8'), args.data]);
                    const messageString = u8a.toString(messageBuffer, 'base64');
                    const signature = yield context.agent.keyManagerSign({
                        keyRef: key.kid,
                        algorithm: 'EdDSA',
                        data: messageString,
                        encoding: 'base64',
                    });
                    return `${headerString}..${signature}`;
                }),
            };
            const verificationKey = yield json_web_signature_1.JsonWebKey.from({
                id: id,
                type: this.getSupportedVerificationType(),
                controller: controller,
                publicKeyJwk: {
                    kty: 'OKP',
                    crv: 'Ed25519',
                    x: u8a.toString(u8a.fromString(key.publicKeyHex, 'hex'), 'base64url'),
                },
            });
            verificationKey.signer = () => signer;
            const suite = new json_web_signature_1.JsonWebSignature({
                key: verificationKey,
            });
            return suite;
        });
    }
    getSuiteForVerification() {
        return new json_web_signature_1.JsonWebSignature();
    }
    preSigningCredModification(credential) {
        credential['@context'] = [...credential['@context'] || [], 'https://w3id.org/security/suites/jws-2020/v1'];
    }
    preDidResolutionModification(didUrl, didDoc) {
        // do nothing
    }
}
exports.VeramoJsonWebSignature2020 = VeramoJsonWebSignature2020;
//# sourceMappingURL=JsonWebSignature2020.js.map