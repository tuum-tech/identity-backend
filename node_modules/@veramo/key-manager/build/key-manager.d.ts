import { AbstractKeyStore } from './abstract-key-store';
import { AbstractKeyManagementSystem } from './abstract-key-management-system';
import { IKey, IKeyManager, IAgentPlugin, IKeyManagerCreateArgs, IKeyManagerGetArgs, IKeyManagerDeleteArgs, IKeyManagerEncryptJWEArgs, IKeyManagerDecryptJWEArgs, IKeyManagerSignJWTArgs, IKeyManagerSignEthTXArgs, IKeyManagerSignArgs, IKeyManagerSharedSecretArgs, MinimalImportableKey, ManagedKeyInfo } from '@veramo/core';
import { ECDH } from 'did-jwt';
/**
 * Agent plugin that implements {@link @veramo/core#IKeyManager} methods.
 *
 * This plugin orchestrates various implementations of {@link AbstractKeyManagementSystem}, using a KeyStore to
 * remember the link between a key reference, its metadata, and the respective key management system that provides the
 * actual cryptographic capabilities.
 *
 * The methods of this plugin are used automatically by other plugins, such as
 * {@link @veramo/did-manager#DIDManager | DIDManager},
 * {@link @veramo/credential-w3c#CredentialPlugin | CredentialPlugin}, or {@link @veramo/did-comm#DIDComm | DIDComm} to
 * perform their required cryptographic operations using the managed keys.
 *
 * @public
 */
export declare class KeyManager implements IAgentPlugin {
    /**
     * Plugin methods
     * @public
     */
    readonly methods: IKeyManager;
    readonly schema: any;
    private store;
    private kms;
    constructor(options: {
        store: AbstractKeyStore;
        kms: Record<string, AbstractKeyManagementSystem>;
    });
    private getKms;
    /** {@inheritDoc @veramo/core#IKeyManager.keyManagerGetKeyManagementSystems} */
    keyManagerGetKeyManagementSystems(): Promise<Array<string>>;
    /** {@inheritDoc @veramo/core#IKeyManager.keyManagerCreate} */
    keyManagerCreate(args: IKeyManagerCreateArgs): Promise<ManagedKeyInfo>;
    /** {@inheritDoc @veramo/core#IKeyManager.keyManagerGet} */
    keyManagerGet({ kid }: IKeyManagerGetArgs): Promise<IKey>;
    /** {@inheritDoc @veramo/core#IKeyManager.keyManagerDelete} */
    keyManagerDelete({ kid }: IKeyManagerDeleteArgs): Promise<boolean>;
    /** {@inheritDoc @veramo/core#IKeyManager.keyManagerImport} */
    keyManagerImport(key: MinimalImportableKey): Promise<ManagedKeyInfo>;
    /** {@inheritDoc @veramo/core#IKeyManager.keyManagerEncryptJWE} */
    keyManagerEncryptJWE({ kid, to, data }: IKeyManagerEncryptJWEArgs): Promise<string>;
    /** {@inheritDoc @veramo/core#IKeyManager.keyManagerDecryptJWE} */
    keyManagerDecryptJWE({ kid, data }: IKeyManagerDecryptJWEArgs): Promise<string>;
    /** {@inheritDoc @veramo/core#IKeyManager.keyManagerSignJWT} */
    keyManagerSignJWT({ kid, data }: IKeyManagerSignJWTArgs): Promise<string>;
    /** {@inheritDoc @veramo/core#IKeyManager.keyManagerSign} */
    keyManagerSign(args: IKeyManagerSignArgs): Promise<string>;
    /** {@inheritDoc @veramo/core#IKeyManager.keyManagerSignEthTX} */
    keyManagerSignEthTX({ kid, transaction }: IKeyManagerSignEthTXArgs): Promise<string>;
    /** {@inheritDoc @veramo/core#IKeyManager.keyManagerSharedSecret} */
    keyManagerSharedSecret(args: IKeyManagerSharedSecretArgs): Promise<string>;
    createX25519ECDH(secretKeyRef: string): ECDH;
}
//# sourceMappingURL=key-manager.d.ts.map