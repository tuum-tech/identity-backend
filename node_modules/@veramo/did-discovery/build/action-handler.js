"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.DIDDiscovery = void 0;
const _1 = require("./");
const debug_1 = __importDefault(require("debug"));
const debug = (0, debug_1.default)('veramo:did-discovery');
/**
 * This class adds support for discovering DIDs.
 *
 * @beta This API may change without a BREAKING CHANGE notice.
 */
class DIDDiscovery {
    constructor(options) {
        this.schema = _1.schema.IDIDDiscovery;
        this.providers = options.providers;
        this.methods = {
            discoverDid: this.discoverDid.bind(this),
        };
    }
    /**
     * Queries data providers and returns DIDs with metadata
     *
     * @param args - The param object with the properties necessary to discover DID
     * @param context - *RESERVED* This is filled by the framework when the method is called.
     *
     */
    discoverDid(args, context) {
        return __awaiter(this, void 0, void 0, function* () {
            const results = [];
            const errors = {};
            for (const provider of this.providers) {
                try {
                    const providerResult = yield provider.discoverDid(args, context);
                    if (providerResult.matches.length > 0) {
                        results.push(providerResult);
                    }
                }
                catch (e) {
                    errors[provider.name] = e === null || e === void 0 ? void 0 : e.message;
                    debug(`Error ${provider}: ${e === null || e === void 0 ? void 0 : e.message}`);
                }
            }
            const result = Object.assign(Object.assign({}, args), { results });
            if (errors) {
                result['errors'] = errors;
            }
            return result;
        });
    }
}
exports.DIDDiscovery = DIDDiscovery;
//# sourceMappingURL=action-handler.js.map