import { IAgentContext, IAgentPlugin, IDataStoreORM, IDIDManager, IKeyManager, VerifiablePresentation } from '@veramo/core';
import { ICredentialIssuer } from '@veramo/core';
import { ICreateProfileCredentialsArgs, ICreateSelectiveDisclosureRequestArgs, ICredentialsForSdr, IGetVerifiableCredentialsForSdrArgs, IPresentationValidationResult, ISelectiveDisclosure, IValidatePresentationAgainstSdrArgs } from './types';
/**
 * This class adds support for creating
 * {@link https://github.com/uport-project/specs/blob/develop/flows/selectivedisclosure.md | Selective Disclosure}
 * requests and interpret the responses received.
 *
 * This implementation of the uPort protocol uses
 * {@link https://www.w3.org/TR/vc-data-model/#presentations | W3C Presentation}
 * as the response encoding instead of a `shareReq`.
 *
 * @beta This API may change without a BREAKING CHANGE notice.
 */
export declare class SelectiveDisclosure implements IAgentPlugin {
    readonly methods: ISelectiveDisclosure;
    readonly schema: any;
    constructor();
    /**
     * Creates a Selective disclosure request, encoded as a JWT.
     *
     * @remarks See
     *   {@link https://github.com/uport-project/specs/blob/develop/flows/selectivedisclosure.md | Selective Disclosure}
     *
     * @param args - The param object with the properties necessary to create the request. See
     *   {@link ISelectiveDisclosureRequest}
     * @param context - *RESERVED* This is filled by the framework when the method is called.
     *
     * @beta This API may change without a BREAKING CHANGE notice.
     */
    createSelectiveDisclosureRequest(args: ICreateSelectiveDisclosureRequestArgs, context: IAgentContext<IDIDManager & IKeyManager>): Promise<string>;
    /**
     * Gathers the required credentials necessary to fulfill a Selective Disclosure Request.
     * It uses a {@link @veramo/core#IDataStoreORM} plugin implementation to query the local database for
     * the required credentials.
     *
     * @param args - Contains the Request to be fulfilled and the DID of the subject
     * @param context - *RESERVED* This is filled by the framework when the method is called.
     *
     * @beta This API may change without a BREAKING CHANGE notice.
     */
    getVerifiableCredentialsForSdr(args: IGetVerifiableCredentialsForSdrArgs, context: IAgentContext<IDataStoreORM>): Promise<ICredentialsForSdr[]>;
    /**
     * Validates a
     * {@link https://github.com/uport-project/specs/blob/develop/flows/selectivedisclosure.md | Selective Disclosure response} encoded as a `Presentation`
     *
     * @param args - Contains the request and the response `Presentation` that needs to be checked.
     * @param context - *RESERVED* This is filled by the framework when the method is called.
     *
     * @beta This API may change without a BREAKING CHANGE notice.
     */
    validatePresentationAgainstSdr(args: IValidatePresentationAgainstSdrArgs, context: IAgentContext<{}>): Promise<IPresentationValidationResult>;
    /**
     * Creates profile credentials
     *
     * @beta This API may change without a BREAKING CHANGE notice.
     */
    createProfilePresentation(args: ICreateProfileCredentialsArgs, context: IAgentContext<ICredentialIssuer & IDIDManager>): Promise<VerifiablePresentation>;
}
//# sourceMappingURL=action-handler.d.ts.map