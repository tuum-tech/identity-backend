"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.extractPublicKeyHex = exports.dereferenceDidKeys = exports.resolveDidOrThrow = exports.mapIdentifierKeysToDoc = exports.getChainIdForDidEthr = exports.getEthereumAddress = exports.compressIdentifierSecp256k1Keys = exports.convertIdentifierEncryptionKeys = void 0;
const ed25519_1 = require("@stablelib/ed25519");
const signing_key_1 = require("@ethersproject/signing-key");
const transactions_1 = require("@ethersproject/transactions");
const type_utils_1 = require("./type-utils");
const u8a = __importStar(require("uint8arrays"));
const elliptic_1 = __importDefault(require("elliptic"));
const basics_1 = require("multiformats/basics");
const debug_1 = __importDefault(require("debug"));
const encodings_1 = require("./encodings");
const debug = (0, debug_1.default)('veramo:utils');
/**
 * Converts any Ed25519 keys of an {@link @veramo/core#IIdentifier | IIdentifier} to X25519 to be usable for encryption.
 *
 * @param identifier - the identifier with keys
 *
 * @returns the array of converted keys filtered to contain only those usable for encryption.
 *
 * @beta This API may change without a BREAKING CHANGE notice.
 */
function convertIdentifierEncryptionKeys(identifier) {
    return identifier.keys
        .map((key) => {
        if (key.type === 'Ed25519') {
            const publicBytes = u8a.fromString(key.publicKeyHex, 'base16');
            key.publicKeyHex = u8a.toString((0, ed25519_1.convertPublicKeyToX25519)(publicBytes), 'base16');
            if (key.privateKeyHex) {
                const privateBytes = u8a.fromString(key.privateKeyHex);
                key.privateKeyHex = u8a.toString((0, ed25519_1.convertSecretKeyToX25519)(privateBytes), 'base16');
            }
            key.type = 'X25519';
        }
        else if (key.type !== 'X25519') {
            debug(`key of type ${key.type} is not supported for [de]encryption`);
            return null;
        }
        return key;
    })
        .filter(type_utils_1.isDefined);
}
exports.convertIdentifierEncryptionKeys = convertIdentifierEncryptionKeys;
/**
 * Converts any Secp256k1 public keys of an {@link @veramo/core#IIdentifier | IIdentifier} to their compressed form.
 *
 * @param identifier - the identifier with keys
 *
 * @returns the array of keys where the Secp256k1 entries are compressed.
 *
 * @beta This API may change without a BREAKING CHANGE notice.
 */
function compressIdentifierSecp256k1Keys(identifier) {
    return identifier.keys
        .map((key) => {
        if (key.type === 'Secp256k1') {
            if (key.publicKeyHex) {
                const publicBytes = u8a.fromString(key.publicKeyHex, 'base16');
                key.publicKeyHex = (0, signing_key_1.computePublicKey)(publicBytes, true).substring(2);
                key.meta = Object.assign({}, key.meta);
                key.meta.ethereumAddress = (0, transactions_1.computeAddress)('0x' + key.publicKeyHex);
            }
        }
        return key;
    })
        .filter(type_utils_1.isDefined);
}
exports.compressIdentifierSecp256k1Keys = compressIdentifierSecp256k1Keys;
/**
 * Compares the `blockchainAccountId` of a `EcdsaSecp256k1RecoveryMethod2020` verification method with the address
 * computed from a locally managed key.
 *
 * @returns true if the local key address corresponds to the `blockchainAccountId`
 *
 * @param localKey - The locally managed key
 * @param verificationMethod - a {@link did-resolver#VerificationMethod | VerificationMethod} with a
 *   `blockchainAccountId`
 *
 * @beta This API may change without a BREAKING CHANGE notice.
 */
function compareBlockchainAccountId(localKey, verificationMethod) {
    var _a, _b;
    if ((verificationMethod.type !== 'EcdsaSecp256k1RecoveryMethod2020' &&
        verificationMethod.type !== 'EcdsaSecp256k1RecoveryMethod2019') ||
        localKey.type !== 'Secp256k1') {
        return false;
    }
    let vmEthAddr = getEthereumAddress(verificationMethod);
    if ((_a = localKey.meta) === null || _a === void 0 ? void 0 : _a.account) {
        return vmEthAddr === ((_b = localKey.meta) === null || _b === void 0 ? void 0 : _b.account.toLowerCase());
    }
    const computedAddr = (0, transactions_1.computeAddress)('0x' + localKey.publicKeyHex).toLowerCase();
    return computedAddr === vmEthAddr;
}
/**
 * Extracts an ethereum address from a {@link did-resolver#VerificationMethod | verification method} supporting legacy
 * representations.
 *
 * @param verificationMethod - the VerificationMethod object (from a DID document)
 *
 * @returns an ethereum address `string` or `undefined` if none could be extracted
 *
 * @beta This API may change without a BREAKING CHANGE notice.
 */
function getEthereumAddress(verificationMethod) {
    var _a, _b, _c, _d, _e;
    let vmEthAddr = (_a = verificationMethod.ethereumAddress) === null || _a === void 0 ? void 0 : _a.toLowerCase();
    if (!vmEthAddr) {
        if ((_b = verificationMethod.blockchainAccountId) === null || _b === void 0 ? void 0 : _b.includes('@eip155')) {
            vmEthAddr = (_c = verificationMethod.blockchainAccountId) === null || _c === void 0 ? void 0 : _c.split('@eip155')[0].toLowerCase();
        }
        else if ((_d = verificationMethod.blockchainAccountId) === null || _d === void 0 ? void 0 : _d.startsWith('eip155')) {
            vmEthAddr = (_e = verificationMethod.blockchainAccountId.split(':')[2]) === null || _e === void 0 ? void 0 : _e.toLowerCase();
        }
        else if (verificationMethod.publicKeyHex ||
            verificationMethod.publicKeyBase58 ||
            verificationMethod.publicKeyBase64) {
            const pbBytes = extractPublicKeyBytes(verificationMethod);
            const pbHex = (0, signing_key_1.computePublicKey)(pbBytes, false);
            vmEthAddr = (0, transactions_1.computeAddress)(pbHex).toLowerCase();
        }
    }
    return vmEthAddr;
}
exports.getEthereumAddress = getEthereumAddress;
function extractPublicKeyBytes(pk) {
    if (pk.publicKeyBase58) {
        return (0, encodings_1.base58ToBytes)(pk.publicKeyBase58);
    }
    else if (pk.publicKeyMultibase) {
        return basics_1.bases['base58btc'].decode(pk.publicKeyMultibase);
    }
    else if (pk.publicKeyBase64) {
        return (0, encodings_1.base64ToBytes)(pk.publicKeyBase64);
    }
    else if (pk.publicKeyHex) {
        return (0, encodings_1.hexToBytes)(pk.publicKeyHex);
    }
    else if (pk.publicKeyJwk &&
        pk.publicKeyJwk.crv === 'secp256k1' &&
        pk.publicKeyJwk.x &&
        pk.publicKeyJwk.y) {
        const secp256k1 = new elliptic_1.default.ec('secp256k1');
        return (0, encodings_1.hexToBytes)(secp256k1
            .keyFromPublic({
            x: (0, encodings_1.bytesToHex)((0, encodings_1.base64ToBytes)(pk.publicKeyJwk.x)),
            y: (0, encodings_1.bytesToHex)((0, encodings_1.base64ToBytes)(pk.publicKeyJwk.y)),
        })
            .getPublic('hex'));
    }
    else if (pk.publicKeyJwk &&
        pk.publicKeyJwk.crv === 'Ed25519' &&
        pk.publicKeyJwk.x) {
        return (0, encodings_1.base64ToBytes)(pk.publicKeyJwk.x);
    }
    return new Uint8Array();
}
/**
 * Extracts the chain ID from a {@link did-resolver#VerificationMethod | verification method} supporting legacy
 * representations as well.
 *
 * @param verificationMethod - the VerificationMethod object (from a DID document)
 *
 * @returns a chain ID `number` or `undefined` if none could be extracted.
 *
 * @beta This API may change without a BREAKING CHANGE notice.
 */
function getChainIdForDidEthr(verificationMethod) {
    var _a, _b;
    if ((_a = verificationMethod.blockchainAccountId) === null || _a === void 0 ? void 0 : _a.includes('@eip155')) {
        return parseInt(verificationMethod.blockchainAccountId.split(':').slice(-1)[0]);
    }
    else if ((_b = verificationMethod.blockchainAccountId) === null || _b === void 0 ? void 0 : _b.startsWith('eip155')) {
        return parseInt(verificationMethod.blockchainAccountId.split(':')[1]);
    }
    throw new Error('blockchainAccountId does not include eip155 designation');
}
exports.getChainIdForDidEthr = getChainIdForDidEthr;
/**
 * Maps the keys of a locally managed {@link @veramo/core#IIdentifier | IIdentifier} to the corresponding
 * {@link did-resolver#VerificationMethod | VerificationMethod} entries from the DID document.
 *
 * @param identifier - the identifier to be mapped
 * @param section - the section of the DID document to be mapped (see
 *   {@link https://www.w3.org/TR/did-core/#verification-relationships | verification relationships}), but can also be
 *   `verificationMethod` to map all the keys.
 * @param context - the veramo agent context, which must contain a {@link @veramo/core#IResolver | IResolver}
 *   implementation that can resolve the DID document of the identifier.
 *
 * @returns an array of mapped keys. The corresponding verification method is added to the `meta.verificationMethod`
 *   property of the key.
 *
 * @beta This API may change without a BREAKING CHANGE notice.
 */
function mapIdentifierKeysToDoc(identifier, section = 'keyAgreement', context) {
    return __awaiter(this, void 0, void 0, function* () {
        const didDocument = yield resolveDidOrThrow(identifier.did, context);
        // dereference all key agreement keys from DID document and normalize
        const documentKeys = yield dereferenceDidKeys(didDocument, section, context);
        let localKeys = identifier.keys.filter(type_utils_1.isDefined);
        if (section === 'keyAgreement') {
            localKeys = convertIdentifierEncryptionKeys(identifier);
        }
        else {
            localKeys = compressIdentifierSecp256k1Keys(identifier);
        }
        // finally map the didDocument keys to the identifier keys by comparing `publicKeyHex`
        const extendedKeys = documentKeys
            .map((verificationMethod) => {
            const localKey = localKeys.find((localKey) => localKey.publicKeyHex === verificationMethod.publicKeyHex ||
                compareBlockchainAccountId(localKey, verificationMethod));
            if (localKey) {
                const { meta } = localKey, localProps = __rest(localKey, ["meta"]);
                return Object.assign(Object.assign({}, localProps), { meta: Object.assign(Object.assign({}, meta), { verificationMethod }) });
            }
            else {
                return null;
            }
        })
            .filter(type_utils_1.isDefined);
        return extendedKeys;
    });
}
exports.mapIdentifierKeysToDoc = mapIdentifierKeysToDoc;
/**
 * Resolve a DID document or throw an error if the resolution fails.
 *
 * @param didUrl - the DID to be resolved
 * @param context - the veramo agent context, which must contain a {@link @veramo/core#IResolver | IResolver}
 *   implementation that can resolve the DID document of the `didUrl`.
 *
 * @returns a {@link did-resolver#DIDDocument | DIDDocument} if resolution is successful
 * @throws if the resolution fails
 *
 * @beta This API may change without a BREAKING CHANGE notice.
 */
function resolveDidOrThrow(didUrl, context) {
    var _a, _b;
    return __awaiter(this, void 0, void 0, function* () {
        // TODO: add caching
        const docResult = yield context.agent.resolveDid({ didUrl: didUrl });
        const err = (_a = docResult === null || docResult === void 0 ? void 0 : docResult.didResolutionMetadata) === null || _a === void 0 ? void 0 : _a.error;
        const msg = (_b = docResult === null || docResult === void 0 ? void 0 : docResult.didResolutionMetadata) === null || _b === void 0 ? void 0 : _b.message;
        const didDocument = docResult.didDocument;
        if (!(0, type_utils_1.isDefined)(didDocument) || err) {
            throw new Error(`not_found: could not resolve DID document for '${didUrl}': ${err} ${msg}`);
        }
        return didDocument;
    });
}
exports.resolveDidOrThrow = resolveDidOrThrow;
/**
 * Dereferences keys from DID document and normalizes them for easy comparison.
 *
 * When dereferencing keyAgreement keys, only Ed25519 and X25519 curves are supported.
 * Other key types are omitted from the result and Ed25519 keys are converted to X25519
 *
 * @returns a Promise that resolves to the list of dereferenced keys.
 *
 * @beta This API may change without a BREAKING CHANGE notice.
 */
function dereferenceDidKeys(didDocument, section = 'keyAgreement', context) {
    return __awaiter(this, void 0, void 0, function* () {
        const convert = section === 'keyAgreement';
        if (section === 'service') {
            return [];
        }
        return (yield Promise.all((didDocument[section] || []).map((key) => __awaiter(this, void 0, void 0, function* () {
            if (typeof key === 'string') {
                try {
                    return (yield context.agent.getDIDComponentById({
                        didDocument,
                        didUrl: key,
                        section,
                    }));
                }
                catch (e) {
                    return null;
                }
            }
            else {
                return key;
            }
        }))))
            .filter(type_utils_1.isDefined)
            .map((key) => {
            const hexKey = extractPublicKeyHex(key, convert);
            const { publicKeyHex, publicKeyBase58, publicKeyMultibase, publicKeyBase64, publicKeyJwk } = key, keyProps = __rest(key, ["publicKeyHex", "publicKeyBase58", "publicKeyMultibase", "publicKeyBase64", "publicKeyJwk"]);
            const newKey = Object.assign(Object.assign({}, keyProps), { publicKeyHex: hexKey });
            if (convert && 'Ed25519VerificationKey2018' === newKey.type) {
                newKey.type = 'X25519KeyAgreementKey2019';
            }
            return newKey;
        });
    });
}
exports.dereferenceDidKeys = dereferenceDidKeys;
/**
 * Converts the publicKey of a VerificationMethod to hex encoding (publicKeyHex)
 *
 * @param pk - the VerificationMethod to be converted
 * @param convert - when this flag is set to true, Ed25519 keys are converted to their X25519 pairs
 * @returns the hex encoding of the public key
 *
 * @beta This API may change without a BREAKING CHANGE notice.
 */
function extractPublicKeyHex(pk, convert = false) {
    let keyBytes = extractPublicKeyBytes(pk);
    if (convert) {
        if (['Ed25519', 'Ed25519VerificationKey2018', 'Ed25519VerificationKey2020'].includes(pk.type)) {
            keyBytes = (0, ed25519_1.convertPublicKeyToX25519)(keyBytes);
        }
        else if (!['X25519', 'X25519KeyAgreementKey2019', 'X25519KeyAgreementKey2020'].includes(pk.type)) {
            return '';
        }
    }
    return u8a.toString(keyBytes, 'base16');
}
exports.extractPublicKeyHex = extractPublicKeyHex;
//# sourceMappingURL=did-utils.js.map