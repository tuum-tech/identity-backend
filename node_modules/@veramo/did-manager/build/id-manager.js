"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.DIDManager = void 0;
const core_1 = require("@veramo/core");
/**
 * Agent plugin that implements {@link @veramo/core#IDIDManager} interface
 * @public
 */
class DIDManager {
    constructor(options) {
        this.schema = core_1.schema.IDIDManager;
        this.providers = options.providers;
        this.defaultProvider = options.defaultProvider;
        this.store = options.store;
        this.methods = {
            didManagerGetProviders: this.didManagerGetProviders.bind(this),
            didManagerFind: this.didManagerFind.bind(this),
            didManagerGet: this.didManagerGet.bind(this),
            didManagerGetByAlias: this.didManagerGetByAlias.bind(this),
            didManagerCreate: this.didManagerCreate.bind(this),
            didManagerSetAlias: this.didManagerSetAlias.bind(this),
            didManagerGetOrCreate: this.didManagerGetOrCreate.bind(this),
            didManagerUpdate: this.didManagerUpdate.bind(this),
            didManagerImport: this.didManagerImport.bind(this),
            didManagerDelete: this.didManagerDelete.bind(this),
            didManagerAddKey: this.didManagerAddKey.bind(this),
            didManagerRemoveKey: this.didManagerRemoveKey.bind(this),
            didManagerAddService: this.didManagerAddService.bind(this),
            didManagerRemoveService: this.didManagerRemoveService.bind(this),
        };
    }
    getProvider(name) {
        let provider = this.providers[name];
        if (!provider) {
            provider = Object.values(this.providers).find((p) => typeof p.matchPrefix === 'function' && p.matchPrefix(name));
        }
        if (!provider)
            throw Error('Identifier provider does not exist: ' + name);
        return provider;
    }
    /** {@inheritDoc @veramo/core#IDIDManager.didManagerGetProviders} */
    didManagerGetProviders() {
        return __awaiter(this, void 0, void 0, function* () {
            return Object.keys(this.providers);
        });
    }
    /** {@inheritDoc @veramo/core#IDIDManager.didManagerFind} */
    didManagerFind(args) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.store.list(args);
        });
    }
    /** {@inheritDoc @veramo/core#IDIDManager.didManagerGet} */
    didManagerGet({ did }) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.store.get({ did });
        });
    }
    /** {@inheritDoc @veramo/core#IDIDManager.didManagerGetByAlias} */
    didManagerGetByAlias({ alias, provider }) {
        return __awaiter(this, void 0, void 0, function* () {
            const providerName = provider || this.defaultProvider;
            return this.store.get({ alias, provider: providerName });
        });
    }
    /** {@inheritDoc @veramo/core#IDIDManager.didManagerCreate} */
    didManagerCreate(args, context) {
        return __awaiter(this, void 0, void 0, function* () {
            const providerName = (args === null || args === void 0 ? void 0 : args.provider) || this.defaultProvider;
            if ((args === null || args === void 0 ? void 0 : args.alias) !== undefined) {
                let existingIdentifier;
                try {
                    existingIdentifier = yield this.store.get({ alias: args.alias, provider: providerName });
                }
                catch (e) { }
                if (existingIdentifier) {
                    throw Error(`illegal_argument: Identifier with alias: ${args.alias}, provider: ${providerName} already exists: ${existingIdentifier.did}`);
                }
            }
            const identifierProvider = this.getProvider(providerName);
            const partialIdentifier = yield identifierProvider.createIdentifier({ kms: args === null || args === void 0 ? void 0 : args.kms, alias: args === null || args === void 0 ? void 0 : args.alias, options: Object.assign({ providerName }, args === null || args === void 0 ? void 0 : args.options) }, context);
            const identifier = Object.assign(Object.assign({}, partialIdentifier), { provider: providerName });
            if (args === null || args === void 0 ? void 0 : args.alias) {
                identifier.alias = args.alias;
            }
            yield this.store.import(identifier);
            return identifier;
        });
    }
    /** {@inheritDoc @veramo/core#IDIDManager.didManagerGetOrCreate} */
    didManagerGetOrCreate({ provider, alias, kms, options }, context) {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                const providerName = provider || this.defaultProvider;
                // @ts-ignore
                const identifier = yield this.store.get({ alias, provider: providerName });
                return identifier;
            }
            catch (_a) {
                return this.didManagerCreate({ provider, alias, kms, options }, context);
            }
        });
    }
    /** {@inheritDoc @veramo/core#IDIDManager.didManagerUpdate} */
    didManagerUpdate({ did, document, options }, context) {
        return __awaiter(this, void 0, void 0, function* () {
            /**
             * 1. Check if the identifier is already in the store
             * 2. If not, throw
             * 3. Check if provider implements updateIdentifier (handles ledger resolution logic)
             * 4. If not, throw
             * 5. If yes, execute updateIdentifier
             * 6. Update the identifier in the store
             * 7. Return the identifier
             */
            const identifier = yield this.store.get({ did });
            const identifierProvider = this.getProvider(identifier.provider);
            if (typeof (identifierProvider === null || identifierProvider === void 0 ? void 0 : identifierProvider.updateIdentifier) !== 'function') {
                throw new Error(`not_supported: ${identifier === null || identifier === void 0 ? void 0 : identifier.provider} provider does not implement full document updates`);
            }
            const updatedIdentifier = yield identifierProvider.updateIdentifier({ did, document, options }, context);
            yield this.store.import(updatedIdentifier);
            return updatedIdentifier;
        });
    }
    /** {@inheritDoc @veramo/core#IDIDManager.didManagerSetAlias} */
    didManagerSetAlias({ did, alias }, context) {
        return __awaiter(this, void 0, void 0, function* () {
            const identifier = yield this.store.get({ did });
            identifier.alias = alias;
            return yield this.store.import(identifier);
        });
    }
    /** {@inheritDoc @veramo/core#IDIDManager.didManagerImport} */
    didManagerImport(identifier, context) {
        return __awaiter(this, void 0, void 0, function* () {
            const keys = [];
            for (const key of identifier.keys) {
                const importedKey = yield context.agent.keyManagerImport(key);
                keys.push(importedKey);
            }
            const services = [...((identifier === null || identifier === void 0 ? void 0 : identifier.services) || [])];
            const importedDID = Object.assign(Object.assign({}, identifier), { keys,
                services });
            yield this.store.import(importedDID);
            return importedDID;
        });
    }
    /** {@inheritDoc @veramo/core#IDIDManager.didManagerDelete} */
    didManagerDelete({ did }, context) {
        return __awaiter(this, void 0, void 0, function* () {
            const identifier = yield this.store.get({ did });
            const provider = this.getProvider(identifier.provider);
            yield provider.deleteIdentifier(identifier, context);
            return this.store.delete({ did });
        });
    }
    /** {@inheritDoc @veramo/core#IDIDManager.didManagerAddKey} */
    didManagerAddKey({ did, key, options }, context) {
        return __awaiter(this, void 0, void 0, function* () {
            const identifier = yield this.store.get({ did });
            const provider = this.getProvider(identifier.provider);
            const result = yield provider.addKey({ identifier, key, options }, context);
            identifier.keys.push(key);
            yield this.store.import(identifier);
            return result;
        });
    }
    /** {@inheritDoc @veramo/core#IDIDManager.didManagerRemoveKey} */
    didManagerRemoveKey({ did, kid, options }, context) {
        return __awaiter(this, void 0, void 0, function* () {
            const identifier = yield this.store.get({ did });
            const provider = this.getProvider(identifier.provider);
            const result = yield provider.removeKey({ identifier, kid, options }, context);
            identifier.keys = identifier.keys.filter((k) => k.kid !== kid);
            yield this.store.import(identifier);
            return result;
        });
    }
    /** {@inheritDoc @veramo/core#IDIDManager.didManagerAddService} */
    didManagerAddService({ did, service, options }, context) {
        return __awaiter(this, void 0, void 0, function* () {
            const identifier = yield this.store.get({ did });
            const provider = this.getProvider(identifier.provider);
            const result = yield provider.addService({ identifier, service, options }, context);
            identifier.services.push(service);
            yield this.store.import(identifier);
            return result;
        });
    }
    /** {@inheritDoc @veramo/core#IDIDManager.didManagerRemoveService} */
    didManagerRemoveService({ did, id, options }, context) {
        return __awaiter(this, void 0, void 0, function* () {
            const identifier = yield this.store.get({ did });
            const provider = this.getProvider(identifier.provider);
            const result = yield provider.removeService({ identifier, id, options }, context);
            identifier.services = identifier.services.filter((s) => s.id !== id);
            yield this.store.import(identifier);
            return result;
        });
    }
}
exports.DIDManager = DIDManager;
//# sourceMappingURL=id-manager.js.map