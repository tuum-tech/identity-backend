"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.SdrMessageHandler = exports.MessageTypes = void 0;
const message_handler_1 = require("@veramo/message-handler");
const uuid_1 = require("uuid");
const debug_1 = __importDefault(require("debug"));
const utils_1 = require("@veramo/utils");
const debug = (0, debug_1.default)('veramo:selective-disclosure:message-handler');
/**
 * Identifies a {@link @veramo/core#IMessage} that represents a Selective Disclosure Request
 *
 * @remarks See {@link https://github.com/uport-project/specs/blob/develop/messages/sharereq.md | Selective Disclosure Request}
 * @beta This API may change without a BREAKING CHANGE notice.
 */
exports.MessageTypes = {
    sdr: 'sdr',
};
/**
 * A Veramo message handler plugin that can decode an incoming Selective Disclosure Response
 * into the internal Message representation.
 *
 * @beta This API may change without a BREAKING CHANGE notice.
 */
class SdrMessageHandler extends message_handler_1.AbstractMessageHandler {
    handle(message, context) {
        const _super = Object.create(null, {
            handle: { get: () => super.handle }
        });
        var _a, _b;
        return __awaiter(this, void 0, void 0, function* () {
            const meta = message.getLastMetaData();
            if (((_a = message === null || message === void 0 ? void 0 : message.data) === null || _a === void 0 ? void 0 : _a.type) == exports.MessageTypes.sdr && ((_b = message === null || message === void 0 ? void 0 : message.data) === null || _b === void 0 ? void 0 : _b.claims)) {
                debug('Message type is', exports.MessageTypes.sdr);
                message.id = (0, utils_1.computeEntryHash)(message.raw || message.id || (0, uuid_1.v4)());
                message.type = exports.MessageTypes.sdr;
                message.from = message.data.iss;
                if (message.data.replyTo) {
                    message.replyTo = (0, utils_1.asArray)(message.data.replyTo);
                }
                if (message.data.replyUrl) {
                    message.replyUrl = message.data.replyUrl;
                }
                if (message.data.subject) {
                    message.to = message.data.subject;
                }
                if (message.data.tag) {
                    message.threadId = message.data.tag;
                }
                message.createdAt = this.timestampToDate(message.data.nbf || message.data.iat).toISOString();
                if (message.data.credentials &&
                    Array.isArray(message.data.credentials) &&
                    message.data.credentials.length > 0) {
                    debug('Verifying included credentials');
                    // FIXME
                    // message.credentials = []
                    // for (const raw of message.data.credentials) {
                    //   try {
                    //     const tmpMessage = await context.agent.handleMessage({ raw, save: false })
                    //     if (tmpMessage.credentials) {
                    //       message.credentials = [...message.credentials, ...tmpMessage.credentials]
                    //     }
                    //   } catch (e) {
                    //     // Unsupported message type, or some other error
                    //     debug(e)
                    //   }
                    // }
                }
                return message;
            }
            return _super.handle.call(this, message, context);
        });
    }
    timestampToDate(timestamp) {
        const date = new Date(0);
        date.setUTCSeconds(timestamp);
        return date;
    }
}
exports.SdrMessageHandler = SdrMessageHandler;
//# sourceMappingURL=message-handler.js.map