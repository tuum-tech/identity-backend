import { AbstractIdentifierProvider } from './abstract-identifier-provider';
import { IAgentPlugin, IIdentifier, IAgentContext, IDIDManager, IKeyManager, IDIDManagerGetArgs, IDIDManagerCreateArgs, IDIDManagerGetByAliasArgs, IDIDManagerGetOrCreateArgs, IDIDManagerUpdateArgs, IDIDManagerDeleteArgs, IDIDManagerAddKeyArgs, IDIDManagerRemoveKeyArgs, IDIDManagerAddServiceArgs, IDIDManagerRemoveServiceArgs, IDIDManagerFindArgs, IDIDManagerSetAliasArgs, MinimalImportableIdentifier } from '@veramo/core';
import { AbstractDIDStore } from './abstract-identifier-store';
/**
 * Agent plugin that implements {@link @veramo/core#IDIDManager} interface
 * @public
 */
export declare class DIDManager implements IAgentPlugin {
    /**
     * Plugin methods
     * @public
     */
    readonly methods: IDIDManager;
    readonly schema: any;
    private providers;
    private defaultProvider;
    private store;
    constructor(options: {
        providers: Record<string, AbstractIdentifierProvider>;
        defaultProvider: string;
        store: AbstractDIDStore;
    });
    private getProvider;
    /** {@inheritDoc @veramo/core#IDIDManager.didManagerGetProviders} */
    didManagerGetProviders(): Promise<string[]>;
    /** {@inheritDoc @veramo/core#IDIDManager.didManagerFind} */
    didManagerFind(args: IDIDManagerFindArgs): Promise<IIdentifier[]>;
    /** {@inheritDoc @veramo/core#IDIDManager.didManagerGet} */
    didManagerGet({ did }: IDIDManagerGetArgs): Promise<IIdentifier>;
    /** {@inheritDoc @veramo/core#IDIDManager.didManagerGetByAlias} */
    didManagerGetByAlias({ alias, provider }: IDIDManagerGetByAliasArgs): Promise<IIdentifier>;
    /** {@inheritDoc @veramo/core#IDIDManager.didManagerCreate} */
    didManagerCreate(args: IDIDManagerCreateArgs, context: IAgentContext<IKeyManager>): Promise<IIdentifier>;
    /** {@inheritDoc @veramo/core#IDIDManager.didManagerGetOrCreate} */
    didManagerGetOrCreate({ provider, alias, kms, options }: IDIDManagerGetOrCreateArgs, context: IAgentContext<IKeyManager>): Promise<IIdentifier>;
    /** {@inheritDoc @veramo/core#IDIDManager.didManagerUpdate} */
    didManagerUpdate({ did, document, options }: IDIDManagerUpdateArgs, context: IAgentContext<IKeyManager>): Promise<IIdentifier>;
    /** {@inheritDoc @veramo/core#IDIDManager.didManagerSetAlias} */
    didManagerSetAlias({ did, alias }: IDIDManagerSetAliasArgs, context: IAgentContext<IKeyManager>): Promise<boolean>;
    /** {@inheritDoc @veramo/core#IDIDManager.didManagerImport} */
    didManagerImport(identifier: MinimalImportableIdentifier, context: IAgentContext<IKeyManager>): Promise<IIdentifier>;
    /** {@inheritDoc @veramo/core#IDIDManager.didManagerDelete} */
    didManagerDelete({ did }: IDIDManagerDeleteArgs, context: IAgentContext<IKeyManager>): Promise<boolean>;
    /** {@inheritDoc @veramo/core#IDIDManager.didManagerAddKey} */
    didManagerAddKey({ did, key, options }: IDIDManagerAddKeyArgs, context: IAgentContext<IKeyManager>): Promise<any>;
    /** {@inheritDoc @veramo/core#IDIDManager.didManagerRemoveKey} */
    didManagerRemoveKey({ did, kid, options }: IDIDManagerRemoveKeyArgs, context: IAgentContext<IKeyManager>): Promise<any>;
    /** {@inheritDoc @veramo/core#IDIDManager.didManagerAddService} */
    didManagerAddService({ did, service, options }: IDIDManagerAddServiceArgs, context: IAgentContext<IKeyManager>): Promise<any>;
    /** {@inheritDoc @veramo/core#IDIDManager.didManagerRemoveService} */
    didManagerRemoveService({ did, id, options }: IDIDManagerRemoveServiceArgs, context: IAgentContext<IKeyManager>): Promise<any>;
}
//# sourceMappingURL=id-manager.d.ts.map