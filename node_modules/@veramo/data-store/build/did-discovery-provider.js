"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.DataStoreDiscoveryProvider = void 0;
/**
 * This implementation of {@link @veramo/did-discovery#AbstractDidDiscoveryProvider | AbstractDidDiscoveryProvider}
 * helps you discover DIDs based on data that is stored by a local plugin that implements
 * {@link @veramo/core#IDataStoreORM | IDataStoreORM}.
 *
 * DIDs can be discovered by partial matches of `name` from `Profile` credentials, by partial matches of `alias` of
 * managed DIDs as well as partial matches of DIDs that are issuer or subject of credentials.
 *
 * @beta This API may change without a BREAKING CHANGE notice.
 */
class DataStoreDiscoveryProvider {
    constructor() {
        this.name = 'data-store-discovery';
    }
    discoverDid(args, context) {
        return __awaiter(this, void 0, void 0, function* () {
            const matches = [];
            const credentialsByName = yield context.agent.dataStoreORMGetVerifiableCredentialsByClaims({
                where: [
                    { column: 'type', value: ['name'] },
                    { column: 'value', value: [`%${args.query}%`], op: 'Like' },
                    { column: 'credentialType', value: ['VerifiableCredential,Profile'] },
                ],
            });
            credentialsByName.forEach((vc) => {
                matches.push({
                    did: vc.verifiableCredential.credentialSubject.id,
                    metaData: {
                        verifiableCredential: vc.verifiableCredential,
                    },
                });
            });
            const credentialsByDID = yield context.agent.dataStoreORMGetVerifiableCredentialsByClaims({
                where: [
                    { column: 'type', value: ['name'] },
                    { column: 'subject', value: [`%${args.query}%`], op: 'Like' },
                    { column: 'credentialType', value: ['VerifiableCredential,Profile'] },
                ],
            });
            credentialsByDID.forEach((vc) => {
                matches.push({
                    did: vc.verifiableCredential.credentialSubject.id,
                    metaData: {
                        verifiableCredential: vc.verifiableCredential,
                    },
                });
            });
            const identifiersByDID = yield context.agent.dataStoreORMGetIdentifiers({
                where: [
                    { column: 'did', value: [`%${args.query}%`], op: 'Like' }
                ]
            });
            identifiersByDID.forEach((identifier) => {
                matches.push({
                    did: identifier.did,
                    metaData: {
                        alias: identifier.alias
                    }
                });
            });
            const identifiersByAlias = yield context.agent.dataStoreORMGetIdentifiers({
                where: [
                    { column: 'alias', value: [`%${args.query}%`], op: 'Like' }
                ]
            });
            identifiersByAlias.forEach((identifier) => {
                matches.push({
                    did: identifier.did,
                    metaData: {
                        alias: identifier.alias
                    }
                });
            });
            return {
                provider: this.name,
                matches,
            };
        });
    }
}
exports.DataStoreDiscoveryProvider = DataStoreDiscoveryProvider;
//# sourceMappingURL=did-discovery-provider.js.map