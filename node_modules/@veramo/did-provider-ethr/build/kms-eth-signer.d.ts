import { TransactionRequest, Provider } from '@ethersproject/abstract-provider';
import { Signer, TypedDataSigner, TypedDataDomain, TypedDataField } from '@ethersproject/abstract-signer';
import { Bytes } from '@ethersproject/bytes';
import { Deferrable } from '@ethersproject/properties';
import { IRequiredContext } from './ethr-did-provider';
import { IKey } from '@veramo/core';
/**
 * Creates an `@ethersproject/abstract-signer` implementation by wrapping
 * a veramo agent with a key-manager that should be capable of `eth_signTransaction`
 */
export declare class KmsEthereumSigner extends Signer implements TypedDataSigner {
    private context;
    private controllerKey;
    readonly provider?: Provider;
    constructor(controllerKey: IKey, context: IRequiredContext, provider?: Provider);
    getAddress(): Promise<string>;
    signTransaction(transaction: Deferrable<TransactionRequest>): Promise<string>;
    _signTypedData(domain: TypedDataDomain, types: Record<string, Array<TypedDataField>>, value: Record<string, any>): Promise<string>;
    signMessage(message: string | Bytes): Promise<string>;
    connect(provider: Provider): KmsEthereumSigner;
}
//# sourceMappingURL=kms-eth-signer.d.ts.map