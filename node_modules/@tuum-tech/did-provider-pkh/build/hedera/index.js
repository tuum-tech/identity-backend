"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.testClientOperatorMatch = void 0;
const sdk_1 = require("@hashgraph/sdk");
function testClientOperatorMatch(client) {
    return __awaiter(this, void 0, void 0, function* () {
        const tx = new sdk_1.TransferTransaction()
            /* eslint-disable-next-line @typescript-eslint/no-non-null-assertion */
            .addHbarTransfer(client.operatorAccountId, sdk_1.Hbar.fromTinybars(0))
            .setMaxTransactionFee(sdk_1.Hbar.fromTinybars(1));
        try {
            yield tx.execute(client);
        }
        catch (err) {
            console.log(`Error: ${err}`);
            if (err instanceof sdk_1.StatusError) {
                if (err.status === sdk_1.Status.InsufficientTxFee ||
                    err.status === sdk_1.Status.InsufficientPayerBalance) {
                    // If the transaction fails with Insufficient Tx Fee, this means
                    // that the account ID verification succeeded before this point
                    // Same for Insufficient Payer Balance
                    return true;
                }
                return false;
            }
            throw err;
        }
        // under *no* cirumstances should this transaction succeed
        throw new Error('unexpected success of intentionally-erroneous transaction to confirm account ID');
    });
}
exports.testClientOperatorMatch = testClientOperatorMatch;
//# sourceMappingURL=index.js.map