import { IDataStore, IAgentPlugin, IAgentContext, IMessageHandler, IHandleMessageArgs, IMessage } from '@veramo/core';
import { AbstractMessageHandler } from './abstract-message-handler';
export declare const EventTypes: {
    validatedMessage: string;
    savedMessage: string;
    error: string;
};
/**
 * A Veramo agent plugin that implements {@link @veramo/core#IMessageHandler | IMessageHandler} methods.
 *
 * This plugin is meant to chain together multiple other {@link @veramo/core#IMessageHandler | IMessageHandler}
 * implementations.
 *
 * When handling a message, the message is passed from one handler to the next, and each handler in
 * the chain can decide if it is able to interpret the message.
 *
 * If the message can be processed by a handler it is returned as an {@link @veramo/core#IMessage | IMessage}.
 * If the message cannot be processed by any of the handlers, an error is thrown.
 *
 * @public
 */
export declare class MessageHandler implements IAgentPlugin {
    /**
     * Plugin methods
     * @public
     */
    readonly methods: IMessageHandler;
    readonly schema: any;
    private messageHandler?;
    constructor(options: {
        messageHandlers: AbstractMessageHandler[];
    });
    /** {@inheritDoc @veramo/core#IMessageHandler.handleMessage} */
    handleMessage(args: IHandleMessageArgs, context: IAgentContext<IDataStore>): Promise<IMessage>;
}
//# sourceMappingURL=message-handler.d.ts.map