"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.EthrDIDProvider = exports.toEthereumAddress = exports.DEFAULT_GAS_LIMIT = void 0;
const did_manager_1 = require("@veramo/did-manager");
const providers_1 = require("@ethersproject/providers");
const bignumber_1 = require("@ethersproject/bignumber");
const signing_key_1 = require("@ethersproject/signing-key");
const transactions_1 = require("@ethersproject/transactions");
const kms_eth_signer_1 = require("./kms-eth-signer");
const debug_1 = __importDefault(require("debug"));
const ethr_did_1 = require("ethr-did");
const bytes_1 = require("@ethersproject/bytes");
const debug = (0, debug_1.default)('veramo:did-provider-ethr');
/**
 * For most operations at most 60-70k gas is needed, larger amount for safety
 */
exports.DEFAULT_GAS_LIMIT = 100000;
/**
 * Helper method that can computes the ethereumAddress corresponding to a Secp256k1 public key.
 * @param hexPublicKey A hex encoded public key, optionally prefixed with `0x`
 */
function toEthereumAddress(hexPublicKey) {
    const publicKey = hexPublicKey.startsWith('0x') ? hexPublicKey : '0x' + hexPublicKey;
    return (0, transactions_1.computeAddress)(publicKey);
}
exports.toEthereumAddress = toEthereumAddress;
/**
 * {@link @veramo/did-manager#DIDManager} identifier provider for `did:ethr` identifiers
 * @public
 */
class EthrDIDProvider extends did_manager_1.AbstractIdentifierProvider {
    constructor(options) {
        super();
        this.defaultKms = options.defaultKms;
        if (options.networks) {
            this.networks = options.networks;
        }
        else {
            const singleNetwork = {
                provider: options.web3Provider,
                rpcUrl: options.rpcUrl,
                registry: options.registry,
            };
            if (typeof singleNetwork.provider === 'undefined') {
                singleNetwork.provider = new providers_1.JsonRpcProvider(singleNetwork.rpcUrl, singleNetwork.network);
            }
            if (typeof options.network === 'string') {
                if (options.network.startsWith('0x')) {
                    singleNetwork.chainId = parseInt(options.network.substring(2), 16);
                }
                else {
                    singleNetwork.name = options.network;
                }
            }
            else if (typeof options.network === 'number') {
                singleNetwork.chainId = options.network;
                singleNetwork.name = options.name;
            }
            this.networks = [singleNetwork];
        }
        this.ttl = options.ttl;
        this.gas = options.gas;
    }
    createIdentifier({ kms, options }, context) {
        var _a, _b;
        return __awaiter(this, void 0, void 0, function* () {
            const key = yield context.agent.keyManagerCreate({ kms: kms || this.defaultKms, type: 'Secp256k1' });
            const compressedPublicKey = (0, signing_key_1.computePublicKey)(`0x${key.publicKeyHex}`, true);
            let networkSpecifier = (options === null || options === void 0 ? void 0 : options.network) ||
                (((_a = options === null || options === void 0 ? void 0 : options.providerName) === null || _a === void 0 ? void 0 : _a.match(/^did:ethr:.+$/)) ? (_b = options === null || options === void 0 ? void 0 : options.providerName) === null || _b === void 0 ? void 0 : _b.substring(9) : undefined);
            const network = this.getNetworkFor(networkSpecifier);
            if (!network) {
                throw new Error(`invalid_setup: Cannot create did:ethr. There is no known configuration for network=${networkSpecifier}'`);
            }
            if (typeof networkSpecifier === 'number') {
                networkSpecifier =
                    network.name && network.name.length > 0
                        ? network.name
                        : bignumber_1.BigNumber.from((options === null || options === void 0 ? void 0 : options.network) || 1).toHexString();
            }
            const networkString = networkSpecifier && networkSpecifier !== 'mainnet' ? `${networkSpecifier}:` : '';
            const identifier = {
                did: 'did:ethr:' + networkString + compressedPublicKey,
                controllerKeyId: key.kid,
                keys: [key],
                services: [],
            };
            debug('Created', identifier.did);
            return identifier;
        });
    }
    updateIdentifier(args, context) {
        return __awaiter(this, void 0, void 0, function* () {
            throw new Error('EthrDIDProvider updateIdentifier not supported yet.');
        });
    }
    deleteIdentifier(identifier, context) {
        return __awaiter(this, void 0, void 0, function* () {
            for (const { kid } of identifier.keys) {
                // FIXME: keys might be used by multiple DIDs or even independent
                yield context.agent.keyManagerDelete({ kid });
            }
            return true;
        });
    }
    getNetworkFor(networkSpecifier) {
        let networkNameOrId = networkSpecifier || 'mainnet';
        if (typeof networkNameOrId === 'string' &&
            (networkNameOrId.startsWith('0x') || parseInt(networkNameOrId) > 0)) {
            networkNameOrId = bignumber_1.BigNumber.from(networkNameOrId).toNumber();
        }
        let network = this.networks.find((n) => n.chainId === networkNameOrId || n.name === networkNameOrId || n.description === networkNameOrId);
        if (!network && !networkSpecifier && this.networks.length === 1) {
            network = this.networks[0];
        }
        return network;
    }
    getEthrDidController(identifier, context, metaIdentifierKeyId) {
        var _a, _b, _c;
        return __awaiter(this, void 0, void 0, function* () {
            if (identifier.controllerKeyId == null) {
                throw new Error('invalid_argument: identifier does not list a `controllerKeyId`');
            }
            const controllerKey = yield context.agent.keyManagerGet({ kid: identifier.controllerKeyId });
            if (typeof controllerKey === 'undefined') {
                throw new Error('invalid_argument: identifier.controllerKeyId is not managed by this agent');
            }
            // find network
            const networkStringMatcher = /^did:ethr(:.+)?:(0x[0-9a-fA-F]{40}|0x[0-9a-fA-F]{66}).*$/;
            const matches = identifier.did.match(networkStringMatcher);
            let network = this.getNetworkFor((_a = matches === null || matches === void 0 ? void 0 : matches[1]) === null || _a === void 0 ? void 0 : _a.substring(1));
            if (!matches || !network) {
                throw new Error(`invalid_argument: cannot find network for ${identifier.did}`);
            }
            if (metaIdentifierKeyId) {
                const metaControllerKey = yield context.agent.keyManagerGet({ kid: metaIdentifierKeyId });
                if (typeof metaControllerKey === 'undefined') {
                    throw new Error('invalid_argument: identifier.controllerKeyId is not managed by this agent');
                }
                // Identity owner signs payload but metaIdentifier send the tx (meta transaction; signed methods)
                return new ethr_did_1.EthrDID({
                    identifier: identifier.did,
                    provider: network.provider,
                    chainNameOrId: network.name || network.chainId,
                    rpcUrl: network.rpcUrl,
                    registry: network.registry,
                    txSigner: new kms_eth_signer_1.KmsEthereumSigner(metaControllerKey, context, network === null || network === void 0 ? void 0 : network.provider),
                });
            }
            if ((_c = (_b = controllerKey.meta) === null || _b === void 0 ? void 0 : _b.algorithms) === null || _c === void 0 ? void 0 : _c.includes('eth_signTransaction')) {
                return new ethr_did_1.EthrDID({
                    identifier: identifier.did,
                    provider: network.provider,
                    chainNameOrId: network.name || network.chainId,
                    rpcUrl: network.rpcUrl,
                    registry: network.registry,
                    txSigner: new kms_eth_signer_1.KmsEthereumSigner(controllerKey, context, network === null || network === void 0 ? void 0 : network.provider),
                });
            }
            else {
                // Web3Provider should perform signing and sending transaction
                return new ethr_did_1.EthrDID({
                    identifier: identifier.did,
                    provider: network.provider,
                    chainNameOrId: network.name || network.chainId,
                    rpcUrl: network.rpcUrl,
                    registry: network.registry,
                });
            }
        });
    }
    addKey({ identifier, key, options }, context) {
        return __awaiter(this, void 0, void 0, function* () {
            const ethrDid = yield this.getEthrDidController(identifier, context);
            const usg = key.type === 'X25519' ? 'enc' : 'veriKey';
            const encoding = key.type === 'X25519' ? 'base58' : (options === null || options === void 0 ? void 0 : options.encoding) || 'hex';
            const attrName = `did/pub/${key.type}/${usg}/${encoding}`;
            const attrValue = '0x' + key.publicKeyHex;
            const ttl = (options === null || options === void 0 ? void 0 : options.ttl) || this.ttl || 86400;
            const gasLimit = (options === null || options === void 0 ? void 0 : options.gasLimit) || this.gas || exports.DEFAULT_GAS_LIMIT;
            if (options === null || options === void 0 ? void 0 : options.metaIdentifierKeyId) {
                const metaHash = yield ethrDid.createSetAttributeHash(attrName, attrValue, ttl);
                const canonicalSignature = yield EthrDIDProvider.createMetaSignature(context, identifier, metaHash);
                const metaEthrDid = yield this.getEthrDidController(identifier, context, options.metaIdentifierKeyId);
                debug('ethrDid.addKeySigned %o', { attrName, attrValue, ttl, gasLimit });
                delete options.metaIdentifierKeyId;
                const txHash = yield metaEthrDid.setAttributeSigned(attrName, attrValue, ttl, { sigV: canonicalSignature.v, sigR: canonicalSignature.r, sigS: canonicalSignature.s }, Object.assign(Object.assign({}, options), { gasLimit }));
                debug(`ethrDid.addKeySigned tx = ${txHash}`);
                return txHash;
            }
            else {
                debug('ethrDid.setAttribute %o', { attrName, attrValue, ttl, gasLimit });
                const txHash = yield ethrDid.setAttribute(attrName, attrValue, ttl, undefined, Object.assign(Object.assign({}, options), { gasLimit }));
                debug(`ethrDid.addKey tx = ${txHash}`);
                return txHash;
            }
        });
    }
    addService({ identifier, service, options, }, context) {
        return __awaiter(this, void 0, void 0, function* () {
            const ethrDid = yield this.getEthrDidController(identifier, context);
            const attrName = 'did/svc/' + service.type;
            const attrValue = typeof service.serviceEndpoint === 'string'
                ? service.serviceEndpoint
                : JSON.stringify(service.serviceEndpoint);
            const ttl = (options === null || options === void 0 ? void 0 : options.ttl) || this.ttl || 86400;
            const gasLimit = (options === null || options === void 0 ? void 0 : options.gasLimit) || this.gas || exports.DEFAULT_GAS_LIMIT;
            debug('ethrDid.setAttribute %o', { attrName, attrValue, ttl, gasLimit });
            if (options === null || options === void 0 ? void 0 : options.metaIdentifierKeyId) {
                const metaHash = yield ethrDid.createSetAttributeHash(attrName, attrValue, ttl);
                const canonicalSignature = yield EthrDIDProvider.createMetaSignature(context, identifier, metaHash);
                const metaEthrDid = yield this.getEthrDidController(identifier, context, options.metaIdentifierKeyId);
                debug('ethrDid.addServiceSigned %o', { attrName, attrValue, ttl, gasLimit });
                delete options.metaIdentifierKeyId;
                const txHash = yield metaEthrDid.setAttributeSigned(attrName, attrValue, ttl, { sigV: canonicalSignature.v, sigR: canonicalSignature.r, sigS: canonicalSignature.s }, Object.assign(Object.assign({}, options), { gasLimit }));
                debug(`ethrDid.addServiceSigned tx = ${txHash}`);
                return txHash;
            }
            else {
                const txHash = yield ethrDid.setAttribute(attrName, attrValue, ttl, undefined, Object.assign(Object.assign({}, options), { gasLimit }));
                debug(`ethrDid.addService tx = ${txHash}`);
                return txHash;
            }
        });
    }
    removeKey(args, context) {
        var _a, _b, _c;
        return __awaiter(this, void 0, void 0, function* () {
            const ethrDid = yield this.getEthrDidController(args.identifier, context);
            const key = args.identifier.keys.find((k) => k.kid === args.kid);
            if (!key)
                throw Error('Key not found');
            const usg = key.type === 'X25519' ? 'enc' : 'veriKey';
            const encoding = key.type === 'X25519' ? 'base58' : ((_a = args.options) === null || _a === void 0 ? void 0 : _a.encoding) || 'hex';
            const attrName = `did/pub/${key.type}/${usg}/${encoding}`;
            const attrValue = '0x' + key.publicKeyHex;
            const gasLimit = ((_b = args.options) === null || _b === void 0 ? void 0 : _b.gasLimit) || this.gas || exports.DEFAULT_GAS_LIMIT;
            if ((_c = args.options) === null || _c === void 0 ? void 0 : _c.metaIdentifierKeyId) {
                const metaHash = yield ethrDid.createRevokeAttributeHash(attrName, attrValue);
                const canonicalSignature = yield EthrDIDProvider.createMetaSignature(context, args.identifier, metaHash);
                const metaEthrDid = yield this.getEthrDidController(args.identifier, context, args.options.metaIdentifierKeyId);
                debug('ethrDid.revokeAttributeSigned %o', { attrName, attrValue, gasLimit });
                delete args.options.metaIdentifierKeyId;
                const txHash = yield metaEthrDid.revokeAttributeSigned(attrName, attrValue, { sigV: canonicalSignature.v, sigR: canonicalSignature.r, sigS: canonicalSignature.s }, Object.assign(Object.assign({}, args.options), { gasLimit }));
                debug(`ethrDid.removeKeySigned tx = ${txHash}`);
                return txHash;
            }
            else {
                debug('ethrDid.revokeAttribute', { attrName, attrValue, gasLimit });
                const txHash = yield ethrDid.revokeAttribute(attrName, attrValue, undefined, Object.assign(Object.assign({}, args.options), { gasLimit }));
                debug(`ethrDid.removeKey tx = ${txHash}`);
                return txHash;
            }
        });
    }
    removeService(args, context) {
        var _a, _b;
        return __awaiter(this, void 0, void 0, function* () {
            const ethrDid = yield this.getEthrDidController(args.identifier, context);
            const service = args.identifier.services.find((s) => s.id === args.id);
            if (!service)
                throw Error('Service not found');
            const attrName = 'did/svc/' + service.type;
            const attrValue = typeof service.serviceEndpoint === 'string'
                ? service.serviceEndpoint
                : JSON.stringify(service.serviceEndpoint);
            const gasLimit = ((_a = args.options) === null || _a === void 0 ? void 0 : _a.gasLimit) || this.gas || exports.DEFAULT_GAS_LIMIT;
            if ((_b = args.options) === null || _b === void 0 ? void 0 : _b.metaIdentifierKeyId) {
                const metaHash = yield ethrDid.createRevokeAttributeHash(attrName, attrValue);
                const canonicalSignature = yield EthrDIDProvider.createMetaSignature(context, args.identifier, metaHash);
                const metaEthrDid = yield this.getEthrDidController(args.identifier, context, args.options.metaIdentifierKeyId);
                debug('ethrDid.revokeAttributeSigned %o', { attrName, attrValue, gasLimit });
                delete args.options.metaIdentifierKeyId;
                const txHash = yield metaEthrDid.revokeAttributeSigned(attrName, attrValue, { sigV: canonicalSignature.v, sigR: canonicalSignature.r, sigS: canonicalSignature.s }, Object.assign(Object.assign({}, args.options), { gasLimit }));
                debug(`ethrDid.removeServiceSigned tx = ${txHash}`);
                return txHash;
            }
            else {
                debug('ethrDid.revokeAttribute', { attrName, attrValue, gasLimit });
                const txHash = yield ethrDid.revokeAttribute(attrName, attrValue, undefined, Object.assign(Object.assign({}, args.options), { gasLimit }));
                debug(`ethrDid.removeService tx = ${txHash}`);
                return txHash;
            }
        });
    }
    /**
     * Tries to determine if this DID provider can manage DIDs with the given prefix.
     *
     * If this provider was configured for a particular network and that network name or hexChainId is used in the prefix
     * it will return true.
     *
     * @param prefix - The DID prefix to match against
     */
    matchPrefix(prefix) {
        var _a;
        const matches = prefix.match(/^did:ethr(:.+)?$/);
        let network = this.getNetworkFor((_a = matches === null || matches === void 0 ? void 0 : matches[1]) === null || _a === void 0 ? void 0 : _a.substring(1));
        if (!matches || !network) {
            return false;
        }
        return true;
    }
    static createMetaSignature(context, identifier, metaHash) {
        return __awaiter(this, void 0, void 0, function* () {
            const controllerKey = yield context.agent.keyManagerGet({ kid: identifier.controllerKeyId });
            if (typeof controllerKey === 'undefined') {
                throw new Error('invalid_argument: identifier.controllerKeyId is not managed by this agent');
            }
            const signature = yield context.agent.keyManagerSign({
                keyRef: controllerKey.kid,
                data: metaHash,
                algorithm: 'eth_rawSign',
                encoding: 'hex',
            });
            return (0, bytes_1.splitSignature)(signature);
        });
    }
}
exports.EthrDIDProvider = EthrDIDProvider;
//# sourceMappingURL=ethr-did-provider.js.map