"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.BrowserLocalStorageStore = void 0;
/**
 * Implementation of {@link VeramoJsonStore} that uses browser localStorage to store data.
 *
 * @example
 * ```
 * const dataStore = BrowserLocalStorageStore.fromLocalStorage('veramo-state')
 * const plugin = new DataStoreJson(dataStore)
 * ```
 *
 * @public
 */
class BrowserLocalStorageStore {
    constructor(localStorageKey) {
        this.localStorageKey = localStorageKey;
        this.notifyUpdate = (oldState, newState) => __awaiter(this, void 0, void 0, function* () {
            this.save(newState);
        });
        this.dids = {};
        this.keys = {};
        this.privateKeys = {};
        this.credentials = {};
        this.claims = {};
        this.presentations = {};
        this.messages = {};
    }
    static fromLocalStorage(localStorageKey) {
        const store = new BrowserLocalStorageStore(localStorageKey);
        return store.load();
    }
    load() {
        if (typeof window !== 'undefined') {
            const rawCache = window.localStorage.getItem(this.localStorageKey) || '{}';
            let cache;
            try {
                cache = JSON.parse(rawCache);
            }
            catch (e) {
                cache = {};
            }
            ({
                dids: this.dids,
                keys: this.keys,
                credentials: this.credentials,
                claims: this.claims,
                presentations: this.presentations,
                messages: this.messages,
                privateKeys: this.privateKeys,
            } = Object.assign({ dids: {}, keys: {}, credentials: {}, claims: {}, presentations: {}, messages: {}, privateKeys: {} }, cache));
        }
        return this;
    }
    save(newState) {
        if (typeof window !== 'undefined') {
            window.localStorage.setItem(this.localStorageKey, JSON.stringify(newState));
        }
    }
}
exports.BrowserLocalStorageStore = BrowserLocalStorageStore;
//# sourceMappingURL=browser-local-storage-store.js.map