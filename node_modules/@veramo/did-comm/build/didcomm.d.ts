import 'cross-fetch/polyfill';
import { IAgentContext, IResolver, IMessage, IDIDManager, IKeyManager, IMessageHandler, IAgentPlugin } from '@veramo/core';
import { IDIDComm } from './types/IDIDComm';
import { IDIDCommTransport } from './transports/transports';
import { DIDCommMessageMediaType, DIDCommMessagePacking, IDIDCommMessage, IDIDCommOptions, IPackedDIDCommMessage, IUnpackedDIDCommMessage } from './types/message-types';
/**
 * @deprecated Please use {@link IDIDComm.sendDIDCommMessage} instead. This will be removed in Veramo 4.0.
 * Input arguments for {@link IDIDComm.sendMessageDIDCommAlpha1}
 *
 * @beta This API may change without a BREAKING CHANGE notice.
 */
export interface ISendMessageDIDCommAlpha1Args {
    url?: string;
    save?: boolean;
    data: {
        id?: string;
        from: string;
        to: string;
        type: string;
        body: object | string;
    };
    headers?: Record<string, string>;
}
/**
 * The input to the {@link DIDComm.unpackDIDCommMessage} method.
 *
 * @beta This API may change without a BREAKING CHANGE notice.
 */
export type IUnpackDIDCommMessageArgs = IPackedDIDCommMessage;
/**
 * The input to the {@link DIDComm.packDIDCommMessage} method.
 * When `packing` is `authcrypt` or `jws`, a `keyRef` MUST be provided.
 *
 * @beta This API may change without a BREAKING CHANGE notice.
 */
export interface IPackDIDCommMessageArgs {
    message: IDIDCommMessage;
    packing: DIDCommMessagePacking;
    keyRef?: string;
    options?: IDIDCommOptions;
}
/**
 * The input to the {@link DIDComm.sendDIDCommMessage} method.
 * The provided `messageId` will be used in the emitted
 * event to allow event/message correlation.
 *
 * @beta This API may change without a BREAKING CHANGE notice.
 */
export interface ISendDIDCommMessageArgs {
    packedMessage: IPackedDIDCommMessage;
    messageId: string;
    returnTransportId?: string;
    recipientDidUrl: string;
}
/**
 * DID Comm plugin for {@link @veramo/core#Agent}
 *
 * This plugin provides a method of creating an encrypted message according to the initial
 * {@link https://github.com/decentralized-identifier/DIDComm-js | DIDComm-js} implementation.
 *
 * @remarks Be advised that this spec is still not final and that this protocol may need to change.
 *
 * @beta This API may change without a BREAKING CHANGE notice.
 */
export declare class DIDComm implements IAgentPlugin {
    readonly transports: IDIDCommTransport[];
    /** Plugin methods */
    readonly methods: IDIDComm;
    readonly schema: any;
    /**
     * Constructor that takes a list of {@link IDIDCommTransport} objects.
     * @param transports - A list of {@link IDIDCommTransport} objects. Defaults to
     *   {@link @veramo/did-comm#DIDCommHttpTransport | DIDCommHttpTransport}
     */
    constructor(transports?: IDIDCommTransport[]);
    /** {@inheritdoc IDIDComm.packDIDCommMessage} */
    packDIDCommMessage(args: IPackDIDCommMessageArgs, context: IAgentContext<IDIDManager & IKeyManager & IResolver>): Promise<IPackedDIDCommMessage>;
    private packDIDCommMessageJWS;
    private packDIDCommMessageJWE;
    /** {@inheritdoc IDIDComm.getDIDCommMessageMediaType} */
    getDidCommMessageMediaType({ message }: IPackedDIDCommMessage): Promise<DIDCommMessageMediaType>;
    /** {@inheritdoc IDIDComm.unpackDIDCommMessage} */
    unpackDIDCommMessage(args: IUnpackDIDCommMessageArgs, context: IAgentContext<IDIDManager & IKeyManager & IResolver & IMessageHandler>): Promise<IUnpackedDIDCommMessage>;
    private unpackDIDCommMessageJWS;
    private unpackDIDCommMessageJWE;
    private decodeMessageAndMediaType;
    private findPreferredDIDCommService;
    /** {@inheritdoc IDIDComm.sendDIDCommMessage} */
    sendDIDCommMessage(args: ISendDIDCommMessageArgs, context: IAgentContext<IResolver>): Promise<string>;
    /** {@inheritdoc IDIDComm.sendMessageDIDCommAlpha1} */
    sendMessageDIDCommAlpha1(args: ISendMessageDIDCommAlpha1Args, context: IAgentContext<IDIDManager & IKeyManager & IResolver & IMessageHandler>): Promise<IMessage>;
}
//# sourceMappingURL=didcomm.d.ts.map