"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getDidKeyResolver = exports.startsWithMap = void 0;
const did_key_ed25519_1 = require("@transmute/did-key-ed25519");
const did_key_x25519_1 = require("@transmute/did-key-x25519");
const did_key_secp256k1_1 = require("@transmute/did-key-secp256k1");
exports.startsWithMap = {
    'did:key:z6Mk': did_key_ed25519_1.resolve,
    'did:key:z6LS': did_key_x25519_1.resolve,
    'did:key:zQ3s': did_key_secp256k1_1.resolve,
};
const resolveDidKey = (didUrl, _parsed, _resolver, options) => __awaiter(void 0, void 0, void 0, function* () {
    try {
        const startsWith = _parsed.did.substring(0, 12);
        if (exports.startsWithMap[startsWith] !== undefined) {
            const didResolution = yield exports.startsWithMap[startsWith](didUrl, options);
            return Object.assign({ didDocumentMetadata: {}, didResolutionMetadata: {} }, didResolution);
        }
        else {
            return {
                didDocumentMetadata: {},
                didResolutionMetadata: { error: 'invalidDid', message: 'unsupported key type for did:key' },
                didDocument: null,
            };
        }
    }
    catch (err) {
        return {
            didDocumentMetadata: {},
            didResolutionMetadata: { error: 'invalidDid', message: err.toString() },
            didDocument: null,
        };
    }
});
/**
 * Provides a mapping to a did:key resolver, usable by {@link did-resolver#Resolver}.
 *
 * @public
 */
function getDidKeyResolver() {
    return { key: resolveDidKey };
}
exports.getDidKeyResolver = getDidKeyResolver;
//# sourceMappingURL=resolver.js.map